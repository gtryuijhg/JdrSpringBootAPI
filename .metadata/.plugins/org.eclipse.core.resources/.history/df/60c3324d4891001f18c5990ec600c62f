package gregoire.jdr.web;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import gregoire.jdr.access.AdminAccess;
import gregoire.jdr.web.mapper.admin.AdminWebRequestMapper;
import gregoire.jdr.web.mapper.admin.AdminWebResponseMapper;
import gregoire.jdr.web.model.admin.request.AdminRegisterFrontRequest;
import gregoire.jdr.web.model.admin.request.AdminRegisterWebRequest;
import gregoire.jdr.web.model.admin.response.AdminRegisterWebResponse;
import gregoire.jdr.web.validators.admin.AdminWebValidator;

@RestController
@RequestMapping("/admin")
public class AdminController {

	private AdminWebRequestMapper requestMapper;
	private AdminWebResponseMapper responseMapper;
	private AdminWebValidator validator;
	private AdminAccess adminAccess;
	
	public AdminController(AdminWebRequestMapper requestMapper, AdminWebResponseMapper responseMapper, AdminWebValidator validator, AdminAccess adminAccess) {
		this.requestMapper = requestMapper;
		this.responseMapper = responseMapper;
		this.validator = validator;
		this.adminAccess = adminAccess;
	}
	
	@GetMapping("/register")
	public AdminRegisterWebResponse register(@RequestBody AdminRegisterFrontRequest frontRequest) {
		
		AdminRegisterWebRequest webRequest = new AdminRegisterWebRequest();
		AdminRegisterWebResponse webResponse = new AdminRegisterWebResponse();
		
		
		//mapp front request to web request (verify all parameters are not null)
		webRequest = requestMapper.mappAdminRegisterWebReqest(frontRequest, webRequest);
		
		//if any parameter null, throw exception and mapp webResponse with return
		if (!webRequest.getErrors().isEmpty()) {
			
			webResponse = responseMapper.mappAdminRegisterWebResponseInvalidWebRequest(webRequest, webResponse);
			
			return webResponse;
		}
		
		//call web validator (clean request parameters if needed and verify types of request parameters)
		webRequest = validator.validateAdminRegisterWebRequest(webRequest);
		
		//if any parameters not a boolean
		if (!webRequest.getErrors().isEmpty()) {
			
			webResponse = responseMapper.mappAdminRegisterWebResponseInvalidWebRequest(webRequest, webResponse);
			
			return webResponse;
		}
		
		//call access request
		AdminRegisterAccessResponse accessResponse = adminAccess.register(webRequest);
		
		//if errors in accessResponse
		if (!accessResponse.getErrors().isEmpty()) {
			
			webResponse = responseMapper.mappAdminRegisterWebResponseErrorsAccessResponse(accessResponse, webResponse);
			
			return webResponse;
		}
		
		webResponse = responseMapper.mappAdminRegisterWebResponseOk(accessResponse, webResponse);
			
		return webResponse;
	}
}
